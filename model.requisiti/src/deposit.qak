System wasteservice_req_deposit

Dispatch deposit : deposit(MAT, QNT)

Dispatch depositWaste : depositWaste(MAT, QNT)

Context ctxreq_deposit ip [host="localhost" port=8050]

QActor dep_trolley context ctxreq_deposit {
	[#
		var CarryingType = ""
		var CarryingAmount = 0.0
	#]
	
	State home initial {
		printCurrentMessage
		println("\tTrolley | At home")
		updateResource [# "pos(home)" #]
	}
	Transition t0 whenMsg deposit -> go_indoor
	
	State go_indoor {
		printCurrentMessage
		onMsg ( deposit : deposit(MAT, QNT) ) {
			[#
			CarryingType = payloadArg(0)
			CarryingAmount = payloadArg(1).toDouble()	
			#]
		}
		
		delay 500
	}
	Goto indoor
	
	State indoor {
		printCurrentMessage
		println("\tTrolley | At indoor, picking up $CarryingAmount $CarryingType...")
		updateResource [# "pos(indoor)" #]
		delay 500
	}
	Goto go_box
	
	State go_box {
		printCurrentMessage
		delay 500
	}
	Goto box
	
	State box {
		println("\tTrolley | At $CarryingType box, depositing $CarryingAmount $CarryingType...")
		updateResource [# "pos(" + CarryingType + "_box)" #]
		delay 200
		forward dep_waste_boxes -m depositWaste : depositWaste($CarryingType, $CarryingAmount)
	}
	Goto done
	
	State done {
		println("\tTrolley | Done deposit action")
	}
}

QActor dep_waste_boxes context ctxreq_deposit {
	[#
		var ContentGlass = 0.0
		var ContentPlastic = 0.0	
	#]
	State idle initial {
		println("\tBOXES: Paper $ContentPlastic, Glass $ContentGlass")
		updateResource [# "glass(" + ContentGlass + ")\nplastic(" + ContentPlastic + ")" #]
	}
	Transition t0 whenMsg depositWaste -> handleDeposit
	
	State handleDeposit {
		onMsg ( depositWaste : depositWaste(MAT, QNT) ){
			if [# payloadArg(0) == "glass" #] {
				[# ContentGlass += payloadArg(1).toDouble() #]
			} else {
				[# ContentPlastic += payloadArg(1).toDouble() #]				
			}
		}
	}
	Goto idle
}

// Usato per esecuzione standalone, altrimenti invio messaggio manuale per test
QActor dep_init context ctxreq_deposit {
	State wait initial {
		println("Attesa 2 secondi prima di inizio sistema per permettere test manuali...")
		delay 2000
	}
	Goto send
	
	State send {
		[#
			var Material = if (kotlin.random.Random.nextFloat() > 0.5) "glass" else "plastic"
			var Quantity = kotlin.random.Random.nextInt(10, 30)	
		#]
		forward dep_trolley -m deposit : deposit($Material, $Quantity)
	}
}