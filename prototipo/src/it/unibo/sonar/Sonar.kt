/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var Status = "continue"
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 var DelayTime : kotlin.Long = kotlin.random.Random.nextLong(9000, 13000)  
						delay(DelayTime)
						if(  Status == "continue"  
						 ){ Status = "stop"  
						emit("trolleyStop", "trolleyStop(_)" ) 
						println("	SONAR: STOP")
						}
						else
						 { Status = "continue"  
						 emit("trolleyResume", "trolleyResume(_)" ) 
						 println("	SONAR: RESUME")
						 }
					}
					 transition( edgeName="goto",targetState="init", cond=doswitch() )
				}	 
			}
		}
}
