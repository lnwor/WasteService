/* Generated by AN DISI Unibo */ 
package it.unibo.camion

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Camion ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Allowed = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="req", cond=doswitch() )
				}	 
				state("waitArrival") { //this:State
					action { //it:State
						 var DelayTime : kotlin.Long = kotlin.random.Random.nextLong(7000, 10000)  
						delay(DelayTime)
					}
					 transition( edgeName="goto",targetState="req", cond=doswitch() )
				}	 
				state("req") { //this:State
					action { //it:State
						
									var Material = if (kotlin.random.Random.nextFloat() > 0.5) "glass" else "paper"
									var Quantity = kotlin.random.Random.nextInt(10, 30)	
						println("Truck with $Material in amount $Quantity arrived")
						request("depositRequest", "depositRequest($Material,$Quantity)" ,"wasteservice" )  
					}
					 transition(edgeName="t10",targetState="handleReplyDeposit",cond=whenReply("replyDeposit"))
				}	 
				state("handleReplyDeposit") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("replyDeposit(RESPONSE)"), Term.createTerm("replyDeposit(ALLOW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  "loadaccept" != payloadArg(0)  
								 ){println("	Truck left (denied)")
								 Allowed = false  
								}
								else
								 { Allowed = true  
								 println("	Truck left (allowed)")
								 }
						}
					}
					 transition( edgeName="goto",targetState="waitArrival", cond=doswitchGuarded({ !Allowed  
					}) )
					transition( edgeName="goto",targetState="waitPickup", cond=doswitchGuarded({! ( !Allowed  
					) }) )
				}	 
				state("waitPickup") { //this:State
					action { //it:State
					}
					 transition(edgeName="t31",targetState="finish",cond=whenDispatch("pickedUp"))
				}	 
				state("finish") { //this:State
					action { //it:State
						println("	Truck left (done)")
					}
					 transition( edgeName="goto",targetState="waitArrival", cond=doswitch() )
				}	 
			}
		}
}
