/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var TrolleyState = ""
				var Interrupt = false
				var CarryType = ""
				var CarryAmount = 0.0
				var Position = 0.0	
				var MaxPos = kotlin.random.Random.nextLong(1, 8)
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						 TrolleyState = "idle"  
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("tStatus", "tStatus(home,$Position)" ) 
					}
					 transition(edgeName="tIdle7",targetState="handleStop",cond=whenEvent("trolleyStop"))
					transition(edgeName="tIdle8",targetState="startMoveDeposit",cond=whenRequest("depositRequest"))
				}	 
				state("startMoveDeposit") { //this:State
					action { //it:State
						 TrolleyState = "startMoveDeposit"  
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("tStatus", "tStatus(moving,$Position)" ) 
						if( checkMsgContent( Term.createTerm("depositRequest(MAT,QNT)"), Term.createTerm("depositRequest(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								  				CarryType = payloadArg(0)
								  				CarryAmount = payloadArg(1).toDouble()
						}
						stateTimer = TimerActor("timer_startMoveDeposit", 
							scope, context!!, "local_tout_trolley_startMoveDeposit", 0.toLong() )
					}
					 transition(edgeName="twaitDepositEnd9",targetState="waitDepositEnd",cond=whenTimeout("local_tout_trolley_startMoveDeposit"))   
					transition(edgeName="twaitDepositEnd10",targetState="handleStop",cond=whenEvent("trolleyStop"))
				}	 
				state("waitDepositEnd") { //this:State
					action { //it:State
						 TrolleyState = "waitDepositEnd"  
						 Position += 1.0  
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	Current Position is: $Position")
						emit("tStatus", "tStatus(moving,$Position)" ) 
						delay(1000) 
						stateTimer = TimerActor("timer_waitDepositEnd", 
							scope, context!!, "local_tout_trolley_waitDepositEnd", 0.toLong() )
					}
					 transition(edgeName="tDepositEnd11",targetState="depositEndCheck",cond=whenTimeout("local_tout_trolley_waitDepositEnd"))   
					transition(edgeName="tDepositEnd12",targetState="handleStop",cond=whenEvent("trolleyStop"))
				}	 
				state("depositEndCheck") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="depositEnd", cond=doswitchGuarded({ Position >= MaxPos  
					}) )
					transition( edgeName="goto",targetState="waitDepositEnd", cond=doswitchGuarded({! ( Position >= MaxPos  
					) }) )
				}	 
				state("depositEnd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 TrolleyState = "depositEnd"  
						emit("tStatus", "tStatus(stopped,$Position)" ) 
						if(  CarryType == "glass"  
						 ){forward("storageDeposit", "storageDeposit($CarryAmount)" ,"storage_glass" ) 
						}
						else
						 {forward("storageDeposit", "storageDeposit($CarryAmount)" ,"storage_paper" ) 
						 }
						stateTimer = TimerActor("timer_depositEnd", 
							scope, context!!, "local_tout_trolley_depositEnd", 0.toLong() )
					}
					 transition(edgeName="tWaitReturnedIndoor13",targetState="waitReturnedIndoor",cond=whenTimeout("local_tout_trolley_depositEnd"))   
					transition(edgeName="tWaitReturnedIndoor14",targetState="handleStop",cond=whenEvent("trolleyStop"))
				}	 
				state("waitReturnedIndoor") { //this:State
					action { //it:State
						 TrolleyState = "waitReturnedIndoor"  
						
									Position -= 1.0	
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	Going back. Current Position is: $Position")
						emit("tStatus", "tStatus(moving,$Position)" ) 
						delay(1000) 
						stateTimer = TimerActor("timer_waitReturnedIndoor", 
							scope, context!!, "local_tout_trolley_waitReturnedIndoor", 0.toLong() )
					}
					 transition(edgeName="tReturnedIndoor15",targetState="checkReturnedIndoor",cond=whenTimeout("local_tout_trolley_waitReturnedIndoor"))   
					transition(edgeName="tReturnedIndoor16",targetState="handleStop",cond=whenEvent("trolleyStop"))
				}	 
				state("checkReturnedIndoor") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="returnedIndoor", cond=doswitchGuarded({ Position <= 0  
					}) )
					transition( edgeName="goto",targetState="waitReturnedIndoor", cond=doswitchGuarded({! ( Position <= 0  
					) }) )
				}	 
				state("returnedIndoor") { //this:State
					action { //it:State
						 TrolleyState = "returnedIndoor"  
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("tStatus", "tStatus(home,$Position)" ) 
						answer("depositRequest", "doneDeposit", "doneDeposit($CarryType,$CarryAmount)"   )  
						stateTimer = TimerActor("timer_returnedIndoor", 
							scope, context!!, "local_tout_trolley_returnedIndoor", 0.toLong() )
					}
					 transition(edgeName="tIdle17",targetState="idle",cond=whenTimeout("local_tout_trolley_returnedIndoor"))   
					transition(edgeName="tIdle18",targetState="handleStop",cond=whenEvent("trolleyStop"))
				}	 
				state("handleStop") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Interrupt = true  
					}
					 transition( edgeName="goto",targetState="waitSonar", cond=doswitch() )
				}	 
				state("handleResume") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Interrupt = false  
					}
					 transition( edgeName="goto",targetState="startMoveDeposit", cond=doswitchGuarded({ TrolleyState == "idle"  
					}) )
					transition( edgeName="goto",targetState="checkResume_startMoveDeposit", cond=doswitchGuarded({! ( TrolleyState == "idle"  
					) }) )
				}	 
				state("checkResume_startMoveDeposit") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="waitDepositEnd", cond=doswitchGuarded({ TrolleyState == "startMoveDeposit"  
					}) )
					transition( edgeName="goto",targetState="checkResume_waitDepositEnd", cond=doswitchGuarded({! ( TrolleyState == "startMoveDeposit"  
					) }) )
				}	 
				state("checkResume_waitDepositEnd") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="depositEndCheck", cond=doswitchGuarded({ TrolleyState == "waitDepositEnd"  
					}) )
					transition( edgeName="goto",targetState="checkResume_depositEnd", cond=doswitchGuarded({! ( TrolleyState == "waitDepositEnd"  
					) }) )
				}	 
				state("checkResume_depositEnd") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="waitReturnedIndoor", cond=doswitchGuarded({ TrolleyState == "depositEnd"  
					}) )
					transition( edgeName="goto",targetState="checkResume_waitReturnedIndoor", cond=doswitchGuarded({! ( TrolleyState == "depositEnd"  
					) }) )
				}	 
				state("checkResume_waitReturnedIndoor") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="checkReturnedIndoor", cond=doswitchGuarded({ TrolleyState == "waitReturnedIndoor"  
					}) )
					transition( edgeName="goto",targetState="checkResume_idle", cond=doswitchGuarded({! ( TrolleyState == "waitReturnedIndoor"  
					) }) )
				}	 
				state("checkResume_idle") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("waitSonar") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("tStatus", "tStatus(stop,$Position)" ) 
						stateTimer = TimerActor("timer_waitSonar", 
							scope, context!!, "local_tout_trolley_waitSonar", 1000.toLong() )
					}
					 transition(edgeName="tSonar19",targetState="waitSonar",cond=whenTimeout("local_tout_trolley_waitSonar"))   
					transition(edgeName="tSonar20",targetState="handleResume",cond=whenEvent("trolleyResume"))
				}	 
			}
		}
}
