/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var CarryType = ""
				var CarryAmount = 0.0
				var Position = 0.0	
				var MaxPos = kotlin.random.Random.nextLong(1, 8)
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("tStatus", "tStatus(home,$Position)" ) 
					}
					 transition(edgeName="tIdle7",targetState="startMoveDeposit",cond=whenRequest("deposit"))
				}	 
				state("startMoveDeposit") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("tStatus", "tStatus(moving,$Position)" ) 
						if( checkMsgContent( Term.createTerm("deposit(MAT,QNT)"), Term.createTerm("deposit(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								  				CarryType = payloadArg(0)
								  				CarryAmount = payloadArg(1).toDouble()
						}
					}
					 transition( edgeName="goto",targetState="waitDepositEnd", cond=doswitch() )
				}	 
				state("waitDepositEnd") { //this:State
					action { //it:State
						 Position += 1.0  
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	Current Position is: $Position")
						emit("tStatus", "tStatus(moving,$Position)" ) 
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="depositEnd", cond=doswitchGuarded({ Position >= MaxPos  
					}) )
					transition( edgeName="goto",targetState="waitDepositEnd", cond=doswitchGuarded({! ( Position >= MaxPos  
					) }) )
				}	 
				state("depositEnd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("tStatus", "tStatus(stopped,$Position)" ) 
						if(  CarryType == "glass"  
						 ){forward("storageDeposit", "storageDeposit($CarryAmount)" ,"storage_glass" ) 
						}
						else
						 {forward("storageDeposit", "storageDeposit($CarryAmount)" ,"storage_paper" ) 
						 }
					}
					 transition( edgeName="goto",targetState="waitReturnedIndoor", cond=doswitch() )
				}	 
				state("waitReturnedIndoor") { //this:State
					action { //it:State
						
									Position -= 1.0	
						println("$name in ${currentState.stateName} | $currentMsg")
						println("	Going back. Current Position is: $Position")
						emit("tStatus", "tStatus(moving,$Position)" ) 
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="returnedIndoor", cond=doswitchGuarded({ Position <= 0  
					}) )
					transition( edgeName="goto",targetState="waitReturnedIndoor", cond=doswitchGuarded({! ( Position <= 0  
					) }) )
				}	 
				state("returnedIndoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("tStatus", "tStatus(home,$Position)" ) 
						answer("deposit", "doneDeposit", "doneDeposit($CarryType,$CarryAmount)"   )  
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
