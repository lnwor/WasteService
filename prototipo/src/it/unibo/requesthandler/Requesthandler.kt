/* Generated by AN DISI Unibo */ 
package it.unibo.requesthandler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Requesthandler ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		  var TrolleyOut = false
		  var OnTrolleyGlass = 0.0
		  var OnTrolleyPaper = 0.0
		  var CurrentRequestMaterial = ""
		  var CurrentRequestQuantity = 0.0
		  var CurrentRequestCheck = 0.0
		  var FulfillRequestFlag = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="tIdle2",targetState="askStorage",cond=whenRequest("deposit"))
				}	 
				state("askStorage") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("deposit(MAT,QNT)"), Term.createTerm("deposit(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								  				CurrentRequestMaterial = payloadArg(0)
								  				CurrentRequestQuantity = payloadArg(1).toDouble()
								  				CurrentRequestCheck = CurrentRequestQuantity
								if(  CurrentRequestMaterial == "glass"  
								 ){request("storageAsk", "storageAsk(_)" ,"storage_glass" )  
								 CurrentRequestCheck += OnTrolleyGlass  
								}
								else
								 {request("storageAsk", "storageAsk(_)" ,"storage_paper" )  
								  CurrentRequestCheck += OnTrolleyPaper  
								 }
						}
					}
					 transition(edgeName="tAskStorage3",targetState="handleRequest",cond=whenReply("storageAt"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("storageAt(QNT)"), Term.createTerm("storageAt(QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 FulfillRequestFlag = CurrentRequestCheck <= payloadArg(0).toDouble()  
								answer("deposit", "allowDeposit", "allowDeposit($FulfillRequestFlag)"   )  
						}
					}
					 transition( edgeName="goto",targetState="fulfillRequest", cond=doswitchGuarded({ FulfillRequestFlag  
					}) )
					transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({! ( FulfillRequestFlag  
					) }) )
				}	 
				state("fulfillRequest") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="sendTrolley", cond=doswitchGuarded({ !TrolleyOut  
					}) )
					transition( edgeName="goto",targetState="waitForTrolley", cond=doswitchGuarded({! ( !TrolleyOut  
					) }) )
				}	 
				state("waitForTrolley") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="tWaitForTrolley4",targetState="sendTrolley",cond=whenReply("doneDeposit"))
				}	 
				state("sendTrolley") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("pickedUp", "pickedUp($CurrentRequestMaterial,$CurrentRequestQuantity)" ,"camion" ) 
						request("deposit", "deposit($CurrentRequestMaterial,$CurrentRequestQuantity)" ,"trolley" )  
						if(  CurrentRequestMaterial == "glass"  
						 ){ OnTrolleyGlass = CurrentRequestQuantity  
						}
						else
						 { OnTrolleyPaper = CurrentRequestQuantity  
						 }
						
								TrolleyOut = true
								CurrentRequestQuantity = 0.0
								CurrentRequestMaterial = ""
					}
					 transition(edgeName="tSendTrolley5",targetState="trolleyBack",cond=whenReply("doneDeposit"))
					transition(edgeName="tSendTrolley6",targetState="askStorage",cond=whenRequest("deposit"))
				}	 
				state("trolleyBack") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 
									TrolleyOut = false
									OnTrolleyGlass = 0.0
									OnTrolleyPaper = 0.0
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
