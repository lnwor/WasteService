/* Generated by AN DISI Unibo */ 
package it.unibo.led_actor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led_actor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var Status = "off"
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
					}
					 transition(edgeName="t029",targetState="handleLed",cond=whenEvent("tStatus"))
				}	 
				state("handleLed") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tStatus(STATE,POSDATA)"), Term.createTerm("tStatus(STATE,_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(0) == "moving"  
								 ){ Status = "blinking"  
								}
								else
								 {if(  payloadArg(0) == "home"  
								  ){ Status = "off"  
								 }
								 else
								  { Status = "on"  
								  }
								 }
						}
						forward("ledStatus", "ledStatus($Status)" ,"gui" ) 
					}
					 transition( edgeName="goto",targetState="init", cond=doswitch() )
				}	 
			}
		}
}
