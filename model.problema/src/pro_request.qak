System wasteservice_pro_request

Request truckDeposit : truckDeposit(MAT, QNT)
Reply loadaccept : loadaccept(_)
Reply loadrejected : loadrejected(_)

Dispatch pickedUp : pickedUp(_)

Request storageAsk : storageAsk(MAT)
Reply storageAt : storageAt(MAT, QNT)

Context ctxpro_request ip [host="localhost" port=8050]

QActor pro_req_wasteservice context ctxpro_request {
	[#
	  var CurrentRequestMaterial = ""
	  var CurrentRequestQuantity = 0.0
	  var CurrentRequestPass = false
	#]  
	State idle initial {
		printCurrentMessage
	}
	Transition tIdle whenRequest truckDeposit -> handleRequest
	
	State handleRequest {
		printCurrentMessage
		onMsg( truckDeposit : truckDeposit(MAT, QNT) ){
  			[# 
  				CurrentRequestMaterial = payloadArg(0)
  				CurrentRequestQuantity = payloadArg(1).toDouble()
			#]
  			
  			println("\tWS | Request received $CurrentRequestMaterial $CurrentRequestQuantity")
  			request pro_req_storagemanager -m storageAsk : storageAsk($CurrentRequestMaterial)
		}
	}
	Transition t0 whenReply storageAt -> handleStorageReply
	
	State handleStorageReply {
		printCurrentMessage
		[# CurrentRequestPass = false #]
		onMsg( storageAt : storageAt(MAT, QNT) ){
			println("\tWS | Has space: ${payloadArg(1)} for ${payloadArg(0)}")
			[# CurrentRequestPass = CurrentRequestQuantity <= payloadArg(1).toDouble() #]
		}
	}
	Goto sendTrolley if [# CurrentRequestPass #] else rejectRequest
	
	State rejectRequest {
		printCurrentMessage
		println("\tWS | rejected")
		replyTo truckDeposit with loadrejected : loadrejected(_)
	}
	Goto idle
	
	State sendTrolley {
		printCurrentMessage
		replyTo truckDeposit with loadaccept : loadaccept(_)
		println("\tWS | accepted")
		delay 1000
		println("\tWS | done, sending away truck")
		forward pro_req_wastetruck -m pickedUp : pickedUp(_)
	}
	Goto idle
}

QActor pro_req_storagemanager context ctxpro_request {
	[#
		var Content = mutableMapOf("glass" to 0.0, "plastic" to 0.0)
	#]
	State idle initial {
		printCurrentMessage
		println("STORAGE: Glass ${Content[\"glass\"]}, Plastic ${Content[\"plastic\"]}")
		updateResource [# "glass(" + Content["glass"] + ")\nplastic(" + Content["plastic"] + ")" #]
	}
	Transition t0 whenRequest storageAsk -> handleAsk
	
	State handleAsk {
		printCurrentMessage
		onMsg (storageAsk : storageAsk(MAT) ) {
			[# var Amount = kotlin.random.Random.Default.nextDouble(15.0, 50.0) #]
			replyTo storageAsk with storageAt : storageAt($payloadArg(0), $Amount)
		}
	}
	Goto idle

}

QActor pro_req_wastetruck context ctxpro_request {
	[#
		var Times = 5	
	#]
	State req initial {
		printCurrentMessage
		[#
			var Material = if (kotlin.random.Random.nextFloat() > 0.5) "glass" else "plastic"
			var Quantity = kotlin.random.Random.nextInt(10, 30)	
		#]
		println ("\tTruck with $Material in amount $Quantity arrived")
		request pro_req_wasteservice -m truckDeposit : truckDeposit($Material, $Quantity)
	}
	Transition t1 whenReply loadaccept -> handleAccepted
				  whenReply loadrejected -> handleRejected
	
	State handleRejected {
		printCurrentMessage
		println("\tTruck denied")
	}
	Goto waitArrival
	
	State handleAccepted {
		printCurrentMessage
		println("\tTruck accepted")
	} 
	Transition t0 whenMsg pickedUp -> waitArrival
	
	State waitArrival {
		printCurrentMessage
		[# var DelayTime : kotlin.Long = kotlin.random.Random.nextLong(7000, 10000) #]
		delayVar DelayTime
		[# Times-- #]
	}
	Goto req if [# Times > 0 #] else finish
	
	State finish {
		println("\tTermine simulazione Qak")
	}
}
